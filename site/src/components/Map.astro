---
// Import options data from JSON file
import options from "./options.json";

// Define start and end years for the data
const startYear = 2013;
const endYear = 2022;

// Generate an array of years from start to end
const years = Array.from(
	{ length: endYear - startYear + 1 },
	(_, i) => startYear + i
);
---

<!-- Map container -->
<div id="map" class="w-screen h-screen"></div>

<!-- Geocoder (search) container -->
<div id="geocoder" class="geocoder fixed top-4 left-4 z-10"></div>

<!-- Controls container -->
<div
	class="sm:w-[580px] text-sm w-full flex flex-col gap-3 absolute bottom-10 rounded-md z-10 bg-white p-4 left-1/2 transform -translate-x-1/2"
>
	<!-- Title -->
	<div>
		<p class="text-md font-semibold">Deprivation Measures</p>
		<p>England</p>
	</div>

	<!-- Measure selector -->
	<div class="flex flex-col gap-1">
		<p class="text-md font-semibold">Measure</p>
		<select id="variable" class="border p-2">
			{
				options.variables.map((variable) => (
					<optgroup label={variable.label}>
						{variable.options.map((option) => (
							<option value={option.value}>{option.label}</option>
						))}
					</optgroup>
				))
			}
		</select>
	</div>

	<!-- Year selector -->
	<div class="flex flex-col gap-1">
		<p class="text-md font-semibold">Year</p>
		<select id="year" class="border p-2">
			{years.map((year) => <option value={year}>{year}</option>)}
		</select>
	</div>

	<!-- Color scale gradient and labels -->
	<div>
		<div id="gradient" class="w-full h-4 rounded"></div>
		<div class="flex justify-between">
			<span id="min"></span>
			<span id="max"></span>
		</div>
	</div>

	<!-- Hover instructions -->
	<div id="hover">Hover over a point to see its value.</div>
</div>

<script>
	import mapboxgl from "mapbox-gl";
	import MapboxGeocoder from "@mapbox/mapbox-gl-geocoder";
	import scales from "./scales.json";
	import chroma from "chroma-js";

	// Get Mapbox access token from environment variable
	const MAPBOX_TOKEN = import.meta.env.PUBLIC_MAPBOX_TOKEN;

	// Initialize the map
	const map = new mapboxgl.Map({
		container: "map",
		center: [-1.2, 52.3],
		zoom: 6,
		minZoom: 4,
		maxZoom: 16,
		style: "mapbox://styles/mapbox/light-v11?optimize=true",
		accessToken: MAPBOX_TOKEN,
		antialias: true,
		projection: { name: "mercator" },
	});

	// Function to get available years for a given variable
	function getAvailableYears(variable: string): string[] {
		const features = map.queryRenderedFeatures({
			layers: ["deprivation"],
		});
		const feature = features[features.length - 1];
		const years = Object.keys(feature.properties)
			.filter((key) => key.startsWith(variable + "_"))
			.map((key) => key.split("_").pop());
		return years;
	}

	// Function to update the color scale gradient and labels
	function updateGradient(variable: string) {
		const { min, max } = scales[variable];
		const colorScale = chroma
			.scale([
				"#0571b0ff",
				"#92c5deff",
				"#f7f7f7ff",
				"#f4a582ff",
				"#ca0020ff",
			])
			.mode("lch")
			.domain([min, max]);
		const numberOfStops = 5;
		const stepSize = (max - min) / (numberOfStops - 1);
		const stops = Array.from({ length: numberOfStops }, (_, i) =>
			colorScale(min + i * stepSize).hex()
		);
		const gradientStyle = `linear-gradient(to right, ${stops.join(", ")})`;
		document.getElementById("gradient").style.background = gradientStyle;
		document.getElementById("min").textContent = `${min}`;
		document.getElementById("max").textContent = `${max}`;
	}

	// Function to update the map layer with new variable and year
	function updateMapLayer(variable: string, year: string) {
		const firstLabelLayerId = map
			.getStyle()
			.layers.find((layer) => layer.type === "symbol").id;

		const { min, max } = scales[variable];
		const colors = chroma
			.scale([
				"#0571b0ff",
				"#92c5deff",
				"#f7f7f7ff",
				"#f4a582ff",
				"#ca0020ff",
			])
			.mode("lch")
			.domain([min, max])
			.colors(6);

		const colorScale = [
			"case",
			["!=", ["get", `${variable}_${year}`], null],
			[
				"interpolate",
				["linear"],
				["get", `${variable}_${year}`],
				min,
				colors[0],
				...colors
					.slice(1, -1)
					.flatMap((color, i) => [
						min + ((i + 1) * (max - min)) / (colors.length - 1),
						color,
					]),
				max,
				colors[colors.length - 1],
			],
			"rgba(0, 0, 0, 0)",
		];

		// Remove the previous source and layer
		if (map.getSource("deprivation")) {
			map.removeLayer("deprivation");
			map.removeSource("deprivation");
		}

		// Add the new source and layer for the selected variable
		map.addSource("deprivation", {
			type: "vector",
			tiles: [
				`https://map.jacobweinbren.workers.dev/${variable}/{z}/{x}/{y}.mvt`,
			],
			minzoom: 0,
			maxzoom: 17,
		});

		console.log(
			`https://map.jacobweinbren.workers.dev/${variable}/{z}/{x}/{y}.mvt`
		);

		map.addLayer(
			{
				id: "deprivation",
				type: "fill",
				source: "deprivation",
				"source-layer": variable,
				paint: {
					"fill-color": colorScale,
					"fill-opacity": 1,
				},
			},
			firstLabelLayerId
		);
	}

	// Wait for map to load before adding layers and controls
	map.on("load", () => {
		// Add geocoder control
		const geocoder = new MapboxGeocoder({
			accessToken: MAPBOX_TOKEN,
			mapboxgl: mapboxgl,
		});
		document.getElementById("geocoder").appendChild(geocoder.onAdd(map));

		// Add navigation control
		map.addControl(new mapboxgl.NavigationControl());

		// Add attribution control
		map.addControl(new mapboxgl.AttributionControl({ compact: true }));

		// Get initial variable and year, update gradient and map layer
		const initialVariable = (
			document.getElementById("variable") as HTMLSelectElement
		).value;
		const initialYear = (
			document.getElementById("year") as HTMLSelectElement
		).value;
		updateGradient(initialVariable);
		updateMapLayer(initialVariable, initialYear);
	});

	// Event listener for variable change
	document.getElementById("variable").addEventListener("change", (event) => {
		const variable = (event.target as HTMLSelectElement).value;
		const year = (document.getElementById("year") as HTMLSelectElement)
			.value;
		updateGradient(variable);
		updateMapLayer(variable, year);
	});

	// Event listener for year change
	document.getElementById("year").addEventListener("change", (event) => {
		const variable = (
			document.getElementById("variable") as HTMLSelectElement
		).value;
		const year = (event.target as HTMLSelectElement).value;
		updateMapLayer(variable, year);
	});

	// Wait for the source to load before disabling unavailable years
	map.on("idle", () => {
		const variable = (
			document.getElementById("variable") as HTMLSelectElement
		).value;
		if (map.getSource("deprivation") && map.isSourceLoaded("deprivation")) {
			const availableYears = getAvailableYears(variable);
			const yearSelect = document.getElementById(
				"year"
			) as HTMLSelectElement;
			Array.from(yearSelect.options).forEach((optionElement) => {
				optionElement.disabled = !availableYears.includes(
					optionElement.value
				);
			});

			if (!availableYears.includes(yearSelect.value)) {
				yearSelect.value = availableYears[0];
			}
		}
	});
</script>
